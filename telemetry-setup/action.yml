name: "GHA telemetry info"
description: Returns identifier metadata that is useful in OpenTelemetry
outputs:
  trace_id:
    description: Global ID; one per repo/run combination. Shared among all jobs in the run.
    value: ${{ steps.get-job-info.outputs.trace_id }}
  span_id:
    description: |
      Trace id combined with job name - this is the span that wraps the whole job.
      There will be multiple spans per top-level trace ID.
    value: ${{ steps.get-job-info.outputs.span_id }}
  job_info_json:
    description: Full job info, including steps with their status and start/complete times
    value: ${{ steps.get-job-info.outputs.job_info_json }}
  job_name:
    description: Human-readable identifier for this job (often a description of a matrix step)
    value: ${{ steps.get-job-info.outputs.job_name }}

runs:
  using: composite
  steps:
    - uses: actions/github-script@v7
      id: get-job-info
      with:
        retries: 3
        script: |
          const { createHash } = require("crypto");

          const runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10)

          const trace_id = createHash("sha256")
            .update(context.repo.owner)
            .update(context.repo.repo)
            .update(String(context.runId))
            .update(String(runAttempt))
            .digest("hex");

          const job_info = await github.rest.actions.listJobsForWorkflowRunAttempt({
              attempt_number: runAttempt,
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
          });

          // We know what the run ID is, but we don't know which specific job we're being run from.
          // https://github.com/orgs/community/discussions/8945
          const this_job = job_info.data.jobs.find((job) => {
            return job.runner_name === process.env.RUNNER_NAME && job.run_attempt === runAttempt;
          });

          const job_name = this_job.name;

          const span_id = createHash("sha256")
            .update(context.repo.owner)
            .update(context.repo.repo)
            .update(String(context.runId))
            .update(String(runAttempt))
            .update(job_name)
            .digest("hex");

          core.setOutput("trace_id", trace_id);
          core.setOutput("job_info_json", this_job);
          core.setOutput("job_name", job_name);
          core.setOutput("span_id", span_id);