name: 'Telemetry summarize'
description: 'Consumes job info, parses into spans, and pushes spans'
inputs:
  host:  # id of input
    description: 'Server to send span data to'
  exporters:
    description: 'Methods to export data (console, OTLP, prometheus, etc.)'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - run: npm install @opentelemetry/api @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-node
      shell: bash
    - uses: actions/github-script@v7
      id: get-job-info
      env:
        EXPORTERS: ${{ inputs.exporters}}
        HOST: ${{ inputs.host}}
      with:
        retries: 3
        script: |
          const { createHash } = require("crypto");

          // This function is inlined here because sharing files between actions sucks. It is duplicated in telemetry-setup.
          get_info = async ({github, context, process}) => {
              const runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10)

              const trace_id = createHash("sha256")
                  .update(context.repo.owner)
                  .update(context.repo.repo)
                  .update(String(context.runId))
                  .update(String(runAttempt))
                  .digest("hex");

              const job_info = await github.rest.actions.listJobsForWorkflowRunAttempt({
                  attempt_number: runAttempt,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: context.runId
              });

              // We know what the run ID is, but we don't know which specific job we're being run from.
              // https://github.com/orgs/community/discussions/8945
              const this_job = job_info.data.jobs.find((job) => {
                  return job.runner_name === process.env.RUNNER_NAME && job.run_attempt === runAttempt;
              });

              console.log(this_job)

              const span_id = createHash("sha256")
                  .update(context.repo.owner)
                  .update(context.repo.repo)
                  .update(String(context.runId))
                  .update(String(runAttempt))
                  .update(this_job.name)
                  .digest("hex");

              return {
                  "job_name": this_job.name,
                  "trace_id": trace_id,
                  "span_id": span_id,
                  "job_info_json": this_job,
              }
          };
          const values = await get_info({github, context, process});
          const { HOST, EXPORTERS } = process.env

          const opentelemetry = require('@opentelemetry/api');

          const { Resource } = require('@opentelemetry/resources');
          const { SEMRESATTRS_SERVICE_NAME } = require('@opentelemetry/semantic-conventions');
          const { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor } = require('@opentelemetry/sdk-trace-base');
          const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');

          console.log(github)
          console.log(context)
          const exporters = EXPORTERS.split(",")

          const tp = new BasicTracerProvider({
              resource: new Resource({
                  [SEMRESATTRS_SERVICE_NAME]: 'basic-service',
              }),
          });

          if (exporters.includes("otlp")) {
              // Configure span processor to send spans to the exporter
              const trace_exporter = new OTLPTraceExporter({
                  endpoint: HOST,
              });
              tp.addSpanProcessor(new SimpleSpanProcessor(trace_exporter));
          }
          if (exporters.includes("console")) {
              tp.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));
          }

          tp.register();

          const tracer = opentelemetry.trace.getTracer(values["job_name"]);
          const job_info = values["job_info_json"]

          // Outer span for the whole job
          // Create a span. A span must be closed.
          const parentSpan = tracer.startSpan(values["span_id"], {startTime: job_info["started_at"]});
          parentSpan.setAttribute("startDelay", job_info["started_at"]-job_info["created_at"])
          //v For each step, create a span with create/start/stop times
          for (const step in job_info.steps) {
              const step_span = tracer.startSpan(step.name, {startTime: step.start_time})
              step_span.setAttribute("startDelay", step["started_at"]-step["created_at"])
              step_span.end(step["completed_at"])
          }
          // Close outer span
          parentSpan.end(job_info["completed_at"]);

          // flush and close the connection.
          if (exporters.includes("otlp")) {
              trace_exporter.shutdown();
          }